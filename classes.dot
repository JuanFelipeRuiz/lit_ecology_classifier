digraph "classes" {
rankdir=BT
charset="utf-8"
"lit_ecology_classifier.data.mover.base_mover.BaseImageMover" [color="#44BB99", fontcolor="black", label=<{BaseImageMover|src_base_path : Optional[str]<br ALIGN="LEFT"/>tgt_base_path : Optional[str]<br ALIGN="LEFT"/>|clean_folder(folder_path: str)<br ALIGN="LEFT"/>copy_image(src_path: str, tgt_path: str)<br ALIGN="LEFT"/>create_tgt_folder(folder_path: str)<br ALIGN="LEFT"/>move_images(paths: Union[pd.DataFrame, List[Tuple[str, str]]], parallel: bool, max_workers: int)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.helpers.helpers.CosineWarmupScheduler" [color="#BBCC33", fontcolor="black", label=<{CosineWarmupScheduler|max_num_iters<br ALIGN="LEFT"/>warmup<br ALIGN="LEFT"/>|get_lr()<br ALIGN="LEFT"/>get_lr_factor(epoch)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.datamodule.DataModule" [color="#44BB99", fontcolor="black", label=<{DataModule|TTA : bool<br ALIGN="LEFT"/>batch_size : int<br ALIGN="LEFT"/>class_map : dict<br ALIGN="LEFT"/>datapath : str<br ALIGN="LEFT"/>dataset : str<br ALIGN="LEFT"/>predict_dataset<br ALIGN="LEFT"/>priority_classes : list<br ALIGN="LEFT"/>rest_classes : list<br ALIGN="LEFT"/>test_dataset<br ALIGN="LEFT"/>train_dataset<br ALIGN="LEFT"/>train_split : float<br ALIGN="LEFT"/>use_multi<br ALIGN="LEFT"/>val_dataset<br ALIGN="LEFT"/>val_split : float<br ALIGN="LEFT"/>|predict_dataloader()<br ALIGN="LEFT"/>setup(stage)<br ALIGN="LEFT"/>test_dataloader()<br ALIGN="LEFT"/>train_dataloader()<br ALIGN="LEFT"/>val_dataloader()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.helpers.helpers.FocalLoss" [color="#BBCC33", fontcolor="black", label=<{FocalLoss|alpha : NoneType, Tensor<br ALIGN="LEFT"/>gamma : int<br ALIGN="LEFT"/>size_average : bool<br ALIGN="LEFT"/>|forward(input, target)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.helpers.hashing.HashGenerator" [color="#BBCC33", fontcolor="black", label=<{HashGenerator|<br ALIGN="LEFT"/>|generate_hash_dict_from_split(df, col_to_hash): list[str]<br ALIGN="LEFT"/>hash_image(image_path: str, hash_algorithm: str): str<br ALIGN="LEFT"/>sha256_from_list(hash_list)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.imagedataset.ImageFolderDataset" [color="#44BB99", fontcolor="black", label=<{ImageFolderDataset|TTA : bool<br ALIGN="LEFT"/>class_map : dict<br ALIGN="LEFT"/>data_dir : str<br ALIGN="LEFT"/>image_infos : list<br ALIGN="LEFT"/>priority_classes : list<br ALIGN="LEFT"/>rest_classes : list<br ALIGN="LEFT"/>rotations : dict<br ALIGN="LEFT"/>train : bool<br ALIGN="LEFT"/>train_transforms : Compose<br ALIGN="LEFT"/>val_transforms : Compose<br ALIGN="LEFT"/>|get_label_from_filename(filename)<br ALIGN="LEFT"/>shuffle()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.models.model.LitClassifier" [color="#AAAA00", fontcolor="black", label=<{LitClassifier|acc<br ALIGN="LEFT"/>class_map<br ALIGN="LEFT"/>datamodule<br ALIGN="LEFT"/>f1<br ALIGN="LEFT"/>inverted_class_map : dict<br ALIGN="LEFT"/>loss<br ALIGN="LEFT"/>model : Beit<br ALIGN="LEFT"/>probabilities : list<br ALIGN="LEFT"/>test_step_predictions : list<br ALIGN="LEFT"/>test_step_probs : list<br ALIGN="LEFT"/>test_step_targets : list<br ALIGN="LEFT"/>val_step_predictions : list<br ALIGN="LEFT"/>val_step_probs : list<br ALIGN="LEFT"/>val_step_targets : list<br ALIGN="LEFT"/>|TTA(batch)<br ALIGN="LEFT"/>configure_optimizers()<br ALIGN="LEFT"/>forward(x)<br ALIGN="LEFT"/>load_datamodule(datamodule)<br ALIGN="LEFT"/>on_fit_end(): None<br ALIGN="LEFT"/>on_predict_epoch_end(): None<br ALIGN="LEFT"/>on_predict_start(): None<br ALIGN="LEFT"/>on_test_epoch_end()<br ALIGN="LEFT"/>on_test_epoch_start(): None<br ALIGN="LEFT"/>on_validation_epoch_end()<br ALIGN="LEFT"/>on_validation_epoch_start()<br ALIGN="LEFT"/>predict_step(batch): None<br ALIGN="LEFT"/>test_step(batch, batch_idx)<br ALIGN="LEFT"/>training_step(batch, batch_idx)<br ALIGN="LEFT"/>validation_step(batch, batch_idx)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.overview_creator.OverviewCreator" [color="#44BB99", fontcolor="black", label=<{OverviewCreator|hash_algorithm : NoneType, str<br ALIGN="LEFT"/>image_paths : dict<br ALIGN="LEFT"/>image_processor<br ALIGN="LEFT"/>raw_split_applier<br ALIGN="LEFT"/>raw_split_preparer<br ALIGN="LEFT"/>split_applier : NoneType<br ALIGN="LEFT"/>zoolake_version_paths : NoneType, dict<br ALIGN="LEFT"/>|get_duplicates_df()<br ALIGN="LEFT"/>get_overview_df()<br ALIGN="LEFT"/>get_overview_with_splits_df()<br ALIGN="LEFT"/>get_raw_df()<br ALIGN="LEFT"/>main(load_new)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.overview.image_processing.ProcessImage" [color="#44BB99", fontcolor="black", label=<{ProcessImage|hash_algorithm : str<br ALIGN="LEFT"/>|process_image(version, image_path): dict<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.mover.raw_images_mover.RawImageMover" [color="#44BB99", fontcolor="black", label=<{RawImageMover|overview_creator<br ALIGN="LEFT"/>|move_raw_to_interim()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.overview.raw_split_applier.RawSplitApplier" [color="#44BB99", fontcolor="black", label=<{RawSplitApplier|image_splits : dict<br ALIGN="LEFT"/>|apply_splits(df: pd.DataFrame): pd.DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.overview.raw_split_preparer.RawSplitPathPreparer" [color="#44BB99", fontcolor="black", label=<{RawSplitPathPreparer|zoolake_version_paths : dict<br ALIGN="LEFT"/>|prepare_split_paths(): dict<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.mover.split_images_mover.SplitImageMover" [color="#44BB99", fontcolor="black", label=<{SplitImageMover|<br ALIGN="LEFT"/>|copy_images(df: pd.DataFrame)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.splitting.split.SplitProcessor" [color="#EEDD88", fontcolor="black", label=<{SplitProcessor|dataset_version : NoneType<br ALIGN="LEFT"/>image_overview_df : NoneType, TextFileReader<br ALIGN="LEFT"/>imgage_mover<br ALIGN="LEFT"/>ood_version : NoneType<br ALIGN="LEFT"/>split_df : NoneType, TextFileReader<br ALIGN="LEFT"/>split_overview_df : NoneType, TextFileReader<br ALIGN="LEFT"/>split_strategy : NoneType<br ALIGN="LEFT"/>split_strategy_str : NoneType, str<br ALIGN="LEFT"/>|append_split_overview(combined_split_hash: str, description: str)<br ALIGN="LEFT"/>copy_images()<br ALIGN="LEFT"/>execute_split(df: pd.DataFrame): dict<br ALIGN="LEFT"/>main(): pd.DataFrame<br ALIGN="LEFT"/>save_changes()<br ALIGN="LEFT"/>save_split(split_df: pd.DataFrame, combined_split_hash: str)<br ALIGN="LEFT"/>save_split_overview()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.splitting.split_strategies.split_strategy.SplitStrategy" [color="#EEDD88", fontcolor="black", label=<{SplitStrategy|<br ALIGN="LEFT"/>|<I>perform_split</I>(data)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.splitting.split_strategies.stratified2.Stratified2" [color="#EEDD88", fontcolor="black", label=<{Stratified2|<br ALIGN="LEFT"/>|perform_split(df)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.tardataset.TarImageDataset" [color="#44BB99", fontcolor="black", label=<{TarImageDataset|TTA : bool<br ALIGN="LEFT"/>class_map : dict<br ALIGN="LEFT"/>image_infos : list<br ALIGN="LEFT"/>priority_classes : list<br ALIGN="LEFT"/>rest_classes : list<br ALIGN="LEFT"/>rotations : dict<br ALIGN="LEFT"/>tar_path : str<br ALIGN="LEFT"/>train : bool<br ALIGN="LEFT"/>train_transforms : Compose<br ALIGN="LEFT"/>val_transforms : Compose<br ALIGN="LEFT"/>|get_label_from_filename(filename)<br ALIGN="LEFT"/>shuffle()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"lit_ecology_classifier.data.mover.raw_images_mover.RawImageMover" -> "lit_ecology_classifier.data.mover.base_mover.BaseImageMover" [arrowhead="empty", arrowtail="none"];
"lit_ecology_classifier.data.mover.split_images_mover.SplitImageMover" -> "lit_ecology_classifier.data.mover.base_mover.BaseImageMover" [arrowhead="empty", arrowtail="none"];
"lit_ecology_classifier.splitting.split_strategies.stratified2.Stratified2" -> "lit_ecology_classifier.splitting.split_strategies.split_strategy.SplitStrategy" [arrowhead="empty", arrowtail="none"];
"lit_ecology_classifier.data.imagedataset.ImageFolderDataset" -> "lit_ecology_classifier.data.datamodule.DataModule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="predict_dataset", style="solid"];
"lit_ecology_classifier.data.mover.split_images_mover.SplitImageMover" -> "lit_ecology_classifier.splitting.split.SplitProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="imgage_mover", style="solid"];
"lit_ecology_classifier.data.overview.image_processing.ProcessImage" -> "lit_ecology_classifier.data.overview_creator.OverviewCreator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="image_processor", style="solid"];
"lit_ecology_classifier.data.overview.raw_split_applier.RawSplitApplier" -> "lit_ecology_classifier.data.overview_creator.OverviewCreator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="raw_split_applier", style="solid"];
"lit_ecology_classifier.data.overview.raw_split_preparer.RawSplitPathPreparer" -> "lit_ecology_classifier.data.overview_creator.OverviewCreator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="raw_split_preparer", style="solid"];
"lit_ecology_classifier.data.tardataset.TarImageDataset" -> "lit_ecology_classifier.data.datamodule.DataModule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="predict_dataset", style="solid"];
"lit_ecology_classifier.splitting.split_strategies.stratified2.Stratified2" -> "lit_ecology_classifier.splitting.split.SplitProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="split_strategy", style="solid"];
"lit_ecology_classifier.splitting.split_strategies.stratified2.Stratified2" -> "lit_ecology_classifier.splitting.split.SplitProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="split_strategy", style="solid"];
"lit_ecology_classifier.data.overview_creator.OverviewCreator" -> "lit_ecology_classifier.data.mover.raw_images_mover.RawImageMover" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="overview_creator", style="solid"];
}
