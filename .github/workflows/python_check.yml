name: Python application

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

permissions:
  contents: read

jobs:

  setup:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    # Install all dependencies (core + linting + test)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pylint black pytest pytest-cov mock pandas

  linting:
    runs-on: ubuntu-latest
    needs: setup

    steps:
    - uses: actions/checkout@v4

    # Linting with Flake8
    - name: Lint with flake8
      run: |
        flake8 -v lit_ecology_classifier/**/*.py --count --select=E9,F7,F82 --show-source --statistics || echo "Flake8 found issues"

    # Linting with Pylint
    - name: Lint with pylint
      run: |
        pylint lit_ecology_classifier/**/*.py || echo "Pylint found issues"

    # Check coding style with Black
    - name: Check coding style with Black
      run: |
        black lit_ecology_classifier/**/*.py --check --diff || echo "Black formatting found issues"

  unit_tests:
    runs-on: ubuntu-latest
    needs: setup

    steps:
    - uses: actions/checkout@v4

    # Run unit tests with coverage
    - name: Run unit tests
      run: |
        pytest --cov=lit_ecology_classifier

  # Conditional Linting Failure Handling
  linting_on_main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: linting

    steps:
    - name: Ensure Linting Errors Cause Failure
      run: |
        if [ "$(echo ${{ steps.flake8.outcome }})" != "success" ]; then
          echo "Linting issues detected on main, failing job."
          exit 1
        fi
